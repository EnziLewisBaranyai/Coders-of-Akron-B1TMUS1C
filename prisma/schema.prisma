// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   username  String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updateAt  DateTime @updatedAt
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  password      String?
  createdAt     DateTime   @default(now())
  updateAt      DateTime   @updatedAt
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  favoriteMusic String?
  favoriteArtist String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Playlist      Playlist[]
  Rating        Rating[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings   Rating[]
  comments  Comment[]
}

model Playlist {
  id        String    @id @default(cuid())
  title     String
  songs     String // Assuming songs are stored as a comma-separated list or some format
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings   Rating[]
  comments  Comment[]
}

model Rating {
  id         String    @id @default(cuid())
  value      Int // Assuming a value between 1-5 or 1-10
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId     String?
  post       Post?     @relation(fields: [postId], references: [id])
  playlistId String?
  playlist   Playlist? @relation(fields: [playlistId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, playlistId])
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId     String?
  post       Post?     @relation(fields: [postId], references: [id])
  playlistId String?
  playlist   Playlist? @relation(fields: [playlistId], references: [id])
}